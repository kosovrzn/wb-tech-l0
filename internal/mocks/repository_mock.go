// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/kosovrzn/wb-tech-l0/internal/domain"
	"github.com/kosovrzn/wb-tech-l0/internal/repo"
	"sync"
)

// Ensure, that RepositoryMock does implement repo.Repository.
// If this is not the case, regenerate this file with moq.
var _ repo.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of repo.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked repo.Repository
//		mockedRepository := &RepositoryMock{
//			GetOrderRawFunc: func(ctx context.Context, id string) ([]byte, error) {
//				panic("mock out the GetOrderRaw method")
//			},
//			UpsertOrderFunc: func(ctx context.Context, o *domain.Order, rawJSON []byte) error {
//				panic("mock out the UpsertOrder method")
//			},
//			WarmupFunc: func(ctx context.Context, limit int) (map[string][]byte, error) {
//				panic("mock out the Warmup method")
//			},
//		}
//
//		// use mockedRepository in code that requires repo.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// GetOrderRawFunc mocks the GetOrderRaw method.
	GetOrderRawFunc func(ctx context.Context, id string) ([]byte, error)

	// UpsertOrderFunc mocks the UpsertOrder method.
	UpsertOrderFunc func(ctx context.Context, o *domain.Order, rawJSON []byte) error

	// WarmupFunc mocks the Warmup method.
	WarmupFunc func(ctx context.Context, limit int) (map[string][]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetOrderRaw holds details about calls to the GetOrderRaw method.
		GetOrderRaw []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UpsertOrder holds details about calls to the UpsertOrder method.
		UpsertOrder []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// O is the o argument value.
			O *domain.Order
			// RawJSON is the rawJSON argument value.
			RawJSON []byte
		}
		// Warmup holds details about calls to the Warmup method.
		Warmup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit int
		}
	}
	lockGetOrderRaw sync.RWMutex
	lockUpsertOrder sync.RWMutex
	lockWarmup      sync.RWMutex
}

// GetOrderRaw calls GetOrderRawFunc.
func (mock *RepositoryMock) GetOrderRaw(ctx context.Context, id string) ([]byte, error) {
	if mock.GetOrderRawFunc == nil {
		panic("RepositoryMock.GetOrderRawFunc: method is nil but Repository.GetOrderRaw was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetOrderRaw.Lock()
	mock.calls.GetOrderRaw = append(mock.calls.GetOrderRaw, callInfo)
	mock.lockGetOrderRaw.Unlock()
	return mock.GetOrderRawFunc(ctx, id)
}

// GetOrderRawCalls gets all the calls that were made to GetOrderRaw.
// Check the length with:
//
//	len(mockedRepository.GetOrderRawCalls())
func (mock *RepositoryMock) GetOrderRawCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetOrderRaw.RLock()
	calls = mock.calls.GetOrderRaw
	mock.lockGetOrderRaw.RUnlock()
	return calls
}

// UpsertOrder calls UpsertOrderFunc.
func (mock *RepositoryMock) UpsertOrder(ctx context.Context, o *domain.Order, rawJSON []byte) error {
	if mock.UpsertOrderFunc == nil {
		panic("RepositoryMock.UpsertOrderFunc: method is nil but Repository.UpsertOrder was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		O       *domain.Order
		RawJSON []byte
	}{
		Ctx:     ctx,
		O:       o,
		RawJSON: rawJSON,
	}
	mock.lockUpsertOrder.Lock()
	mock.calls.UpsertOrder = append(mock.calls.UpsertOrder, callInfo)
	mock.lockUpsertOrder.Unlock()
	return mock.UpsertOrderFunc(ctx, o, rawJSON)
}

// UpsertOrderCalls gets all the calls that were made to UpsertOrder.
// Check the length with:
//
//	len(mockedRepository.UpsertOrderCalls())
func (mock *RepositoryMock) UpsertOrderCalls() []struct {
	Ctx     context.Context
	O       *domain.Order
	RawJSON []byte
} {
	var calls []struct {
		Ctx     context.Context
		O       *domain.Order
		RawJSON []byte
	}
	mock.lockUpsertOrder.RLock()
	calls = mock.calls.UpsertOrder
	mock.lockUpsertOrder.RUnlock()
	return calls
}

// Warmup calls WarmupFunc.
func (mock *RepositoryMock) Warmup(ctx context.Context, limit int) (map[string][]byte, error) {
	if mock.WarmupFunc == nil {
		panic("RepositoryMock.WarmupFunc: method is nil but Repository.Warmup was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Limit int
	}{
		Ctx:   ctx,
		Limit: limit,
	}
	mock.lockWarmup.Lock()
	mock.calls.Warmup = append(mock.calls.Warmup, callInfo)
	mock.lockWarmup.Unlock()
	return mock.WarmupFunc(ctx, limit)
}

// WarmupCalls gets all the calls that were made to Warmup.
// Check the length with:
//
//	len(mockedRepository.WarmupCalls())
func (mock *RepositoryMock) WarmupCalls() []struct {
	Ctx   context.Context
	Limit int
} {
	var calls []struct {
		Ctx   context.Context
		Limit int
	}
	mock.lockWarmup.RLock()
	calls = mock.calls.Warmup
	mock.lockWarmup.RUnlock()
	return calls
}
