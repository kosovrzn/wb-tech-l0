// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/kosovrzn/wb-tech-l0/internal/cache"
	"sync"
)

// Ensure, that StoreMock does implement cache.Store.
// If this is not the case, regenerate this file with moq.
var _ cache.Store = &StoreMock{}

// StoreMock is a mock implementation of cache.Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked cache.Store
//		mockedStore := &StoreMock{
//			GetFunc: func(id string) ([]byte, bool) {
//				panic("mock out the Get method")
//			},
//			SetFunc: func(id string, b []byte)  {
//				panic("mock out the Set method")
//			},
//		}
//
//		// use mockedStore in code that requires cache.Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(id string) ([]byte, bool)

	// SetFunc mocks the Set method.
	SetFunc func(id string, b []byte)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// ID is the id argument value.
			ID string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// ID is the id argument value.
			ID string
			// B is the b argument value.
			B []byte
		}
	}
	lockGet sync.RWMutex
	lockSet sync.RWMutex
}

// Get calls GetFunc.
func (mock *StoreMock) Get(id string) ([]byte, bool) {
	if mock.GetFunc == nil {
		panic("StoreMock.GetFunc: method is nil but Store.Get was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedStore.GetCalls())
func (mock *StoreMock) GetCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *StoreMock) Set(id string, b []byte) {
	if mock.SetFunc == nil {
		panic("StoreMock.SetFunc: method is nil but Store.Set was just called")
	}
	callInfo := struct {
		ID string
		B  []byte
	}{
		ID: id,
		B:  b,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	mock.SetFunc(id, b)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//
//	len(mockedStore.SetCalls())
func (mock *StoreMock) SetCalls() []struct {
	ID string
	B  []byte
} {
	var calls []struct {
		ID string
		B  []byte
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
